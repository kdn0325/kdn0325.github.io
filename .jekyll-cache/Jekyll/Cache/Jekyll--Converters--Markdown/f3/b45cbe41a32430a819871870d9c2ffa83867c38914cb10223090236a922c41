I";<h2 id="10--generic----제네릭이란-타입을-마치-함수의-파라미터처럼-사용하는-것">10.  <strong>Generic</strong>   : <strong>**제네릭이란 타입을 마치 함수의 파라미터처럼 사용하는 것</strong>**</h2>

<ul>
  <li>제네릭은 C#, Java 등의 언어에서 재사용성이 높은 컴포넌트를 만들 때 자주 활용되는 특징입니다. 특히, 한가지 타입보다 여러 가지 타입에서 동작하는 컴포넌트를 생성하는데 사용됩니다.</li>
</ul>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="kd">function</span> <span class="nx">checkNotNullBad</span><span class="p">(</span><span class="na">arg</span><span class="p">:</span><span class="kr">number</span> <span class="o">|</span> <span class="kc">null</span><span class="p">):</span><span class="kr">number</span><span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">arg</span><span class="o">==</span><span class="kc">null</span><span class="p">){</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Not valid Number!</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">arg</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="p">{</span>

  <span class="kd">function</span> <span class="nx">checkNotNullAnyBad</span><span class="p">(</span><span class="na">arg</span><span class="p">:</span><span class="kr">any</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">arg</span><span class="o">==</span><span class="kc">null</span><span class="p">){</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Not valid Number!</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">arg</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">checkNotNullAnyBad</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
<span class="p">}</span>
<span class="p">{</span>
  <span class="kd">function</span> <span class="nx">checkNotNull</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="na">arg</span><span class="p">:</span><span class="nx">T</span> <span class="o">|</span> <span class="kc">null</span><span class="p">):</span><span class="nx">T</span><span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">arg</span><span class="o">==</span><span class="kc">null</span><span class="p">){</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Not valid Number!</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">arg</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="kr">number</span> <span class="o">=</span> <span class="nx">checkNotNull</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
  <span class="kd">const</span> <span class="na">boal</span><span class="p">:</span><span class="nx">boolean</span> <span class="o">=</span> <span class="nx">checkNotNull</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위 코드는 인자를 하나 넘겨 받아 반환해주는 함수입니다. 마치 리눅스의 echo 명령어와 같은 역할을 하죠. 여기서 이 함수의 인자와 반환 값은 모두 string으로 지정되어 있지만 만약 여러 가지 타입을 허용하고 싶다면 아래와 같이 any를 사용할 수 있습니다.</p>

<p>이렇게 타입을 바꾼다고 해서 함수의 동작에 문제가 생기진 않습니다. 다만, 함수의 인자로 어떤 타입이 들어갔고 어떤 값이 반환되는지는 알 수가 없습니다. 왜냐하면 any라는 타입은 타입 검사를 하지 않기 때문입니다.</p>

<p>이러한 문제점을 해결할 수 있는 것이 제네릭이다</p>
:ET