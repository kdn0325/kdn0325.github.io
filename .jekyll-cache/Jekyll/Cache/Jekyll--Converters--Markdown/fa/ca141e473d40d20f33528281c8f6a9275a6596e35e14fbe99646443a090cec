I"7&<h3 id="usereducer">useReducer</h3>

<p>useState의 대체 함수입니다.</p>

<p>(state, action) =&gt; newState의 형태로 reducer를 받고 (필수) dispatch 메서드와 짝의 형태로 현재 state를 반환합니다.</p>

<p>사용하는 이유</p>

<ul>
  <li>다수의 하윗값을 포함하는 복잡한 정적 로직을 만드는 경우</li>
  <li>state가 이전 state에 의존적인 경우에 보통 useState보다 useReducer를 선호</li>
  <li>useReducer는 자세한 업데이트를 트리거 하는 컴포넌트의 성능을 최적화할 수 있게 하는데, 이것은 콜백 대신 dispatch를 전달 할 수 있기 때문</li>
</ul>

<p>1) state : 상태데이터 (이를 임의 정의)</p>

<p>2) dispatch: 액션을 발생시키는 함수 (액션을 보내는곳,연결,전달자)</p>

<p>3) reducer : 상태분리로의 함수 (이름 임의정의)</p>

<p>4) initialArg : 초기값</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">기본값</span>

<span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">dispatch</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useReducer</span><span class="p">(</span><span class="nx">reducer</span><span class="p">,</span> <span class="nx">initialArg</span><span class="p">,</span> <span class="nx">init</span><span class="p">);</span> 

<span class="nx">useReducer</span><span class="p">(</span><span class="nx">상태</span> <span class="nx">업데이트</span> <span class="nx">로직을</span> <span class="nx">담은</span> <span class="nx">함수</span><span class="p">,</span> <span class="nx">초기값</span><span class="p">)</span>

<span class="nx">이벤트</span> <span class="o">=</span> <span class="nx">dispatch</span><span class="p">({</span><span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">액션명</span><span class="dl">"</span><span class="p">})</span> <span class="o">-</span> <span class="nx">dispatch의</span> <span class="nx">타입은</span> <span class="nx">필수</span>

<span class="nx">액션명</span> <span class="p">:</span> <span class="nx">별칭</span> <span class="p">,</span><span class="nx">별명</span> 
        <span class="nx">영문</span> <span class="nx">소문자</span> <span class="p">,</span><span class="nx">대문자</span> <span class="p">,</span><span class="nx">한글</span> <span class="nx">가능</span> <span class="o">/</span> <span class="nx">하지만</span> <span class="nx">대문자</span><span class="p">(</span><span class="nx">상수형</span><span class="p">)</span><span class="nx">로</span> <span class="nx">쓰는게</span> <span class="nx">좋다</span>

    <span class="nx">dispatch</span><span class="p">({</span><span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">필수</span><span class="dl">'</span><span class="p">})</span>
    <span class="nx">dispatch</span><span class="p">({</span><span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">필수</span><span class="dl">'</span><span class="p">,</span> <span class="na">키1</span><span class="p">:</span><span class="nx">값</span><span class="p">})</span>
    <span class="nx">dispatch</span><span class="p">({</span><span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">필수</span><span class="dl">'</span><span class="p">,</span> <span class="na">키1</span><span class="p">:</span><span class="nx">값</span><span class="p">,</span> <span class="na">키2</span><span class="p">:</span><span class="nx">값</span><span class="p">})</span>

<span class="nx">상태</span> <span class="nx">로직</span> <span class="nx">분리</span>
</code></pre></div></div>

<p>1) 기본 카운트 함수 구현</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useReducer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">//초기값</span>

<span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="c1">//분리</span>

<span class="kd">const</span> <span class="nx">reducer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span><span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span><span class="p">{</span>
    <span class="k">switch</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">){</span>
        <span class="k">case</span> <span class="dl">"</span><span class="s2">INCREMENT</span><span class="dl">"</span> <span class="p">:</span> 
            <span class="k">return</span> <span class="nx">state</span><span class="o">+</span><span class="nx">action</span><span class="p">.</span><span class="nx">step</span>
        <span class="k">case</span> <span class="dl">"</span><span class="s2">DECREMENT</span><span class="dl">"</span> <span class="p">:</span> 
            <span class="k">return</span> <span class="nx">state</span><span class="o">-</span><span class="nx">action</span><span class="p">.</span><span class="nx">step</span>
        <span class="k">case</span> <span class="dl">"</span><span class="s2">RESET</span><span class="dl">"</span> <span class="p">:</span> 
            <span class="k">return</span> <span class="mi">0</span>
        <span class="na">default</span><span class="p">:</span>
            <span class="k">return</span> <span class="nx">state</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Test1_step</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">//연결</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span><span class="nx">dispatch</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useReducer</span><span class="p">(</span><span class="nx">reducer</span><span class="p">,</span><span class="nx">initialState</span><span class="p">);</span>
    
    <span class="k">return</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>카운트 : <span class="si">{</span><span class="nx">count</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span><span class="o">=&gt;</span><span class="nx">dispatch</span><span class="p">({</span><span class="na">type</span><span class="p">:</span><span class="dl">"</span><span class="s2">INCREMENT</span><span class="dl">"</span> <span class="p">,</span><span class="na">step</span><span class="p">:</span><span class="mi">10</span><span class="p">})</span><span class="si">}</span><span class="p">&gt;</span>10씩 증가 : INCREMENT<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span><span class="o">=&gt;</span><span class="nx">dispatch</span><span class="p">({</span><span class="na">type</span><span class="p">:</span><span class="dl">"</span><span class="s2">DECREMENT</span><span class="dl">"</span><span class="p">,</span><span class="na">step</span><span class="p">:</span><span class="mi">20</span><span class="p">})</span><span class="si">}</span><span class="p">&gt;</span>20씩 감소 : DECREMENT<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span><span class="o">=&gt;</span><span class="nx">dispatch</span><span class="p">({</span><span class="na">type</span><span class="p">:</span><span class="dl">"</span><span class="s2">RESET</span><span class="dl">"</span><span class="p">})</span><span class="si">}</span><span class="p">&gt;</span>초기화 : RESET<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Test1_step</span><span class="p">;</span>
</code></pre></div></div>

<p>2) 구현 영상</p>

<p><img src="https://user-images.githubusercontent.com/91298955/228571100-38b1df03-d788-4f8f-9987-63d7f8f8393b.gif" alt="useReducer_Timer" /></p>

<hr />
:ET